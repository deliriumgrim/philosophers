в init_data 
записывается time_start=0

init_forks
открываются семафоры и записывается время старта 
time_start = philo_time();

init_philo
выделяется память под массив пидов для того, что бы хранить ид дочерних процессов и ждать их завершения в родительском процессе
в цикле создается дочерний процесс, который уйдет в функцию philo_live, а родительский запишет его id в массив arr_pid.
после родительский процесс уйдет в init_wait_pthread
init_wait_pthread
создает массив для хранения потоков
и для каждого ид дочернего процесса создается поток, который будет ждать завершение этого процесса функцией waitpid(для того, что бы waitpid параллельно ждал все процессы)
далее в этой же функции pthread_join будет ждать завершение этих потоков. 
Когда все потоки завершаться запустится функция ft_exit(3) что бы завершить программу.


дочерний процесс
philo_live
init_philo_struct
присваеват каждому философу id, ссылку на data, num_eat и время последнего приема пищи.
далее включается функция ожидания
создается поток check_time_death для каждого процесса который будет следить за состоянием философа

check_time_death

cond_first_check_time_death
проверяется условие смерти
	philo_time(100) - last_eat(59) < time_to_die(40)
			41
		return (0)
блокируется семафор sem_print
cond_third_check_time_death
if	philo_time(100) - last_eat(59) - time_to_die(40) < 10
				1
выводим сообщение о смерти и ждем, пока умрут все остальные философы.
после этого цикла любой другой поток который попадет в условие cond_third_check_time
 будет больше 10 и не отобразится соообщение о смерти

cond_philo_live c флагом 1 проверяет условие жизни философа

cond_philo_live с флагом 2 проверяет кол-во приемов пищи

actions 

take_forks
проверяется условие смерти философа
умер -> return(0);
берется 1 вилка sem_wait
выводится сообщение о действии
берется 2 вилка sem_wait
выводется сообщние о действии 

eating
проверяется условие смерти философа
умер -> return(0);
выводится сообщение о действии
блокируется семафор last_eat
записывается время приема пищи
разблокируется last_eat
ожидание приема пищи usleep
разблокируются две вилки
блокируется семафор sem_num_eat
записывается прием пищи
разблокируется семафор sem_num_eat

sleeping
проверяется условие смерти философа
умер -> return(0);
проверяется условие на прием пищи
выводится сообщение о действие
слип

thinking 
проверяется условие смерти философа
умер -> return(0);
проверяется условие на прием пищи
выводится сообщение о действии
если время на еду больше, чем на сон, ждем разницу
если кол-во философов нечетное добавляем небольшую задержку



message_status
в нем проверяется условие смерти философа philo_first_check_time_death
если ок, выводится сообщение о действии

